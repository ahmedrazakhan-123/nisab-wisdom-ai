{
  "info": {
    "name": "Nisab Backend Tests",
    "description": "Complete API test suite for Nisab Islamic finance platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://rsugotioapwxuelehsml.supabase.co/functions/v1"
    },
    {
      "key": "apiKey",
      "value": "{{SUPABASE_ANON_KEY}}"
    },
    {
      "key": "user1_id",
      "value": "11111111-1111-1111-1111-111111111111"
    },
    {
      "key": "user2_id", 
      "value": "22222222-2222-2222-2222-222222222222"
    },
    {
      "key": "portfolio1_id",
      "value": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
    },
    {
      "key": "asset1_id",
      "value": "cccccccc-cccc-cccc-cccc-cccccccccccc"
    }
  ],
  "item": [
    {
      "name": "1. Islamic Chatbot Tests",
      "item": [
        {
          "name": "Basic Query with Citations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Is cryptocurrency trading halal in Islam?\",\n  \"user_id\": \"{{user1_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/islamic-chatbot",
              "host": ["{{baseUrl}}"],
              "path": ["islamic-chatbot"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response has correct structure', () => {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('response');",
                  "  pm.expect(response).to.have.property('sources');",
                  "  pm.expect(response).to.have.property('confidence');",
                  "});",
                  "",
                  "pm.test('Response contains citations', () => {",
                  "  const response = pm.response.json();",
                  "  const text = response.response;",
                  "  const hasCitation = /Quran|Hadith|Bukhari|Muslim|AAOIFI/.test(text);",
                  "  pm.expect(hasCitation).to.be.true;",
                  "});",
                  "",
                  "pm.test('Sources array is populated', () => {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.sources).to.be.an('array');",
                  "  if (response.confidence === 'high') {",
                  "    pm.expect(response.sources.length).to.be.greaterThan(0);",
                  "  }",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', () => {",
                  "  pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Idempotency Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type", 
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{apiKey}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "test-key-12345"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What is riba?\",\n  \"user_id\": \"{{user1_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/islamic-chatbot",
              "host": ["{{baseUrl}}"],
              "path": ["islamic-chatbot"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('First request succeeds', () => {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  pm.globals.set('first_response', JSON.stringify(response));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Idempotency Verification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "apikey", 
                "value": "{{apiKey}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "test-key-12345"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What is riba?\",\n  \"user_id\": \"{{user1_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/islamic-chatbot",
              "host": ["{{baseUrl}}"],
              "path": ["islamic-chatbot"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Idempotent response matches first request', () => {",
                  "  pm.response.to.have.status(200);",
                  "  const response = pm.response.json();",
                  "  const firstResponse = JSON.parse(pm.globals.get('first_response'));",
                  "  pm.expect(response.response).to.equal(firstResponse.response);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. Compliance Checker Tests",
      "item": [
        {
          "name": "Check Asset Compliance",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"asset_id\": \"{{asset1_id}}\",\n  \"user_id\": \"{{user1_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/compliance-checker",
              "host": ["{{baseUrl}}"],
              "path": ["compliance-checker"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Compliance response structure', () => {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('compliance_status');",
                  "  pm.expect(response).to.have.property('compliance_score');",
                  "  pm.expect(response).to.have.property('reasons');",
                  "});",
                  "",
                  "pm.test('Compliance status is valid', () => {",
                  "  const response = pm.response.json();",
                  "  const validStatuses = ['halal', 'haram', 'doubtful'];",
                  "  pm.expect(validStatuses).to.include(response.compliance_status);",
                  "});",
                  "",
                  "pm.test('AAOIFI rule references exist', () => {",
                  "  const response = pm.response.json();",
                  "  if (response.reasons && response.reasons.length > 0) {",
                  "    const hasAaoifiRef = response.reasons.some(reason => ",
                  "      reason.includes('AAOIFI') || reason.includes('Standard'))",
                  "    pm.expect(hasAaoifiRef).to.be.true;",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "3. Portfolio Analyzer Tests", 
      "item": [
        {
          "name": "Analyze Portfolio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"portfolio_id\": \"{{portfolio1_id}}\",\n  \"user_id\": \"{{user1_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/portfolio-analyzer",
              "host": ["{{baseUrl}}"],
              "path": ["portfolio-analyzer"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Portfolio analysis structure', () => {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('total_value');",
                  "  pm.expect(response).to.have.property('compliance_breakdown');",
                  "  pm.expect(response).to.have.property('recommendations');",
                  "});",
                  "",
                  "pm.test('Zakat calculation is deterministic', () => {",
                  "  const response = pm.response.json();",
                  "  if (response.zakat_due) {",
                  "    const totalValue = response.total_value;",
                  "    const expectedZakat = totalValue * 0.025;",
                  "    pm.expect(Math.abs(response.zakat_due - expectedZakat)).to.be.below(0.01);",
                  "  }",
                  "});",
                  "",
                  "pm.test('Compliance breakdown adds up to 100%', () => {",
                  "  const response = pm.response.json();",
                  "  const breakdown = response.compliance_breakdown;",
                  "  if (breakdown) {",
                  "    const total = breakdown.halal_percentage + breakdown.haram_percentage + breakdown.doubtful_percentage;",
                  "    pm.expect(Math.abs(total - 100)).to.be.below(0.1);",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "4. Error Handling Tests",
      "item": [
        {
          "name": "Invalid Asset ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"asset_id\": \"invalid-uuid\",\n  \"user_id\": \"{{user1_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/compliance-checker", 
              "host": ["{{baseUrl}}"],
              "path": ["compliance-checker"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error response structure', () => {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('error');",
                  "  pm.expect(response.error).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('No sensitive data in error', () => {",
                  "  const responseText = pm.response.text();",
                  "  const sensitivePatterns = [",
                  "    /sk-[a-zA-Z0-9]+/,",
                  "    /password/i,",
                  "    /secret/i,",
                  "    /key.*=.*[a-zA-Z0-9]{10}/",
                  "  ];",
                  "  sensitivePatterns.forEach(pattern => {",
                  "    pm.expect(responseText).to.not.match(pattern);",
                  "  });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "5. Cross-Tenant Security Tests",
      "item": [
        {
          "name": "User 2 Cannot Access User 1 Portfolio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "apikey",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"portfolio_id\": \"{{portfolio1_id}}\",\n  \"user_id\": \"{{user2_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/portfolio-analyzer",
              "host": ["{{baseUrl}}"],
              "path": ["portfolio-analyzer"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cross-tenant access denied', () => {",
                  "  pm.expect(pm.response.code).to.be.oneOf([403, 404, 500]);",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('error');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global setup",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    }
  ]
}